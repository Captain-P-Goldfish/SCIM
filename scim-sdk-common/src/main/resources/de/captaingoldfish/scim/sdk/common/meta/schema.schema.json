{
  "schemas": [
    "urn:ietf:params:scim:schemas:core:2.0:Schema"
  ],
  "id": "urn:ietf:params:scim:schemas:core:2.0:Schema",
  "name": "Schema",
  "description": "Specifies the schema that describes a SCIM schema",
  "attributes": [
    {
      "name": "id",
      "type": "string",
      "description": "The unique URI of the schema. When applicable, service providers MUST specify the URI.",
      "mutability": "readOnly",
      "returned": "default",
      "uniqueness": "none",
      "multiValued": false,
      "required": true,
      "caseExact": false
    },
    {
      "name": "name",
      "type": "string",
      "description": "The schema's human-readable name. When applicable, service providers MUST specify the name, e.g., 'User'.",
      "mutability": "readOnly",
      "returned": "default",
      "uniqueness": "none",
      "multiValued": false,
      "required": true,
      "caseExact": false
    },
    {
      "name": "description",
      "type": "string",
      "description": "The schema's human-readable name. When applicable, service providers MUST specify the name, e.g., 'User'.",
      "mutability": "readOnly",
      "returned": "default",
      "uniqueness": "none",
      "multiValued": false,
      "required": false,
      "caseExact": false
    },
    {
      "name": "attributes",
      "type": "complex",
      "description": "A complex attribute that includes the attributes of a schema.",
      "mutability": "readOnly",
      "returned": "default",
      "uniqueness": "none",
      "multiValued": true,
      "required": true,
      "caseExact": false,
      "subAttributes": [
        {
          "name": "name",
          "type": "string",
          "description": "The attribute's name.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": true,
          "caseExact": false
        },
        {
          "name": "type",
          "type": "string",
          "description": "The attribute's data type. Valid values include 'string', 'complex', 'boolean', 'decimal', 'integer', 'dateTime', 'reference'.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": true,
          "caseExact": false,
          "canonicalValues": [
            "string",
            "complex",
            "boolean",
            "decimal",
            "integer",
            "dateTime",
            "reference",
            "any"
          ]
        },
        {
          "name": "multiValued",
          "type": "boolean",
          "description": "A Boolean value indicating an attribute's plurality.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": true,
          "caseExact": false
        },
        {
          "name": "description",
          "type": "string",
          "description": "A human-readable description of the attribute.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "A boolean value indicating whether or not the attribute is required.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false
        },
        {
          "name": "canonicalValues",
          "type": "string",
          "description": "A collection of canonical values. When applicable, service providers MUST specify the canonical types, e.g., 'work', 'home'.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": true,
          "required": false,
          "caseExact": false
        },
        {
          "name": "caseExact",
          "type": "boolean",
          "description": "A Boolean value indicating whether or not a string attribute is case sensitive.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false
        },
        {
          "name": "mutability",
          "type": "string",
          "description": "Indicates whether or not an attribute is modifiable.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false,
          "canonicalValues": [
            "readOnly",
            "readWrite",
            "immutable",
            "writeOnly"
          ]
        },
        {
          "name": "returned",
          "type": "string",
          "description": "Indicates when an attribute is returned in a response (e.g., to a query).",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false,
          "canonicalValues": [
            "always",
            "never",
            "default",
            "request"
          ]
        },
        {
          "name": "uniqueness",
          "type": "string",
          "description": "Indicates how unique a value must be.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false,
          "canonicalValues": [
            "none",
            "server",
            "global"
          ]
        },
        {
          "name": "referenceTypes",
          "type": "string",
          "description": "Used only with an attribute of type 'reference'.  Specifies a SCIM resourceType that a reference attribute MAY refer to, e.g., 'User'.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": true,
          "required": false,
          "caseExact": false
        },
        {
          "name": "multipleOf",
          "type": "decimal",
          "description": "The value of \"multipleOf\" MUST be a number, strictly greater than 0. A numeric instance is valid only if division by this keyword's value results in an integer.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false
        },
        {
          "name": "minimum",
          "type": "decimal",
          "description": "The value of \"minimum\" MUST be a number, representing an inclusive lower limit for a numeric instance. If the instance is a number, then this keyword validates only if the instance is greater than or exactly equal to \"minimum\".",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false
        },
        {
          "name": "maximum",
          "type": "decimal",
          "description": "The value of \"maximum\" MUST be a number, representing an inclusive upper limit for a numeric instance. If the instance is a number, then this keyword validates only if the instance is less than or exactly equal to \"maximum\".",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false
        },
        {
          "name": "maxLength",
          "type": "integer",
          "description": "The value of this keyword MUST be a non-negative integer. A string instance is valid against this keyword if its length is less than, or equal to, the value of this keyword. The length of a string instance is defined as the number of its characters as defined by RFC 8259 [RFC8259].",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false
        },
        {
          "name": "minLength",
          "type": "integer",
          "description": "The value of this keyword MUST be a non-negative integer. A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword. The length of a string instance is defined as the number of its characters as defined by RFC 8259 [RFC8259]. Omitting this keyword has the same behavior as a value of 0.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false
        },
        {
          "name": "pattern",
          "type": "string",
          "description": "The value of this keyword MUST be a string. This string SHOULD be a valid regular expression, according to the Java regular expression dialect. A string instance is considered valid if the regular expression matches the instance successfully.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false
        },
        {
          "name": "minItems",
          "type": "integer",
          "description": "The value of this keyword MUST be a non-negative integer. An array instance is valid against \"minItems\" if its size is greater than, or equal to, the value of this keyword. Omitting this keyword has the same behavior as a value of 0.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false
        },
        {
          "name": "maxItems",
          "type": "integer",
          "description": "The value of this keyword MUST be a non-negative integer. An array instance is valid against \"maxItems\" if its size is less than, or equal to, the value of this keyword.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false
        },
        {
          "name": "notBefore",
          "type": "dateTime",
          "description": "The value of this keyword MUST be a dateTime. It will verify that a given dateTime will not a have a value that is before this dateTime.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false
        },
        {
          "name": "notAfter",
          "type": "dateTime",
          "description": "The value of this keyword MUST be a dateTime. It will verify that a given dateTime will not a have a value that is after this dateTime.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": false,
          "required": false,
          "caseExact": false
        },
        {
          "name": "subAttributes",
          "type": "complex",
          "description": "Used to define the sub-attributes of a complex attribute.",
          "mutability": "readOnly",
          "returned": "default",
          "uniqueness": "none",
          "multiValued": true,
          "required": false,
          "caseExact": false,
          "subAttributes": [
            {
              "name": "name",
              "type": "string",
              "description": "The attribute's name.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": true,
              "caseExact": false
            },
            {
              "name": "type",
              "type": "string",
              "description": "The attribute's data type. Valid values include 'string', 'complex', 'boolean', 'decimal', 'integer', 'dateTime', 'reference'.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": true,
              "caseExact": false,
              "canonicalValues": [
                "string",
                "complex",
                "boolean",
                "decimal",
                "integer",
                "dateTime",
                "reference"
              ]
            },
            {
              "name": "multiValued",
              "type": "boolean",
              "description": "A Boolean value indicating an attribute's plurality.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": true,
              "caseExact": false
            },
            {
              "name": "description",
              "type": "string",
              "description": "A human-readable description of the attribute.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false
            },
            {
              "name": "required",
              "type": "boolean",
              "description": "A boolean value indicating whether or not the attribute is required.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false
            },
            {
              "name": "canonicalValues",
              "type": "string",
              "description": "A collection of canonical values.  When applicable, service providers MUST specify the canonical types, e.g., 'work', 'home'.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": true,
              "required": false,
              "caseExact": false
            },
            {
              "name": "caseExact",
              "type": "boolean",
              "description": "A Boolean value indicating whether or not a string attribute is case sensitive.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false
            },
            {
              "name": "mutability",
              "type": "string",
              "description": "Indicates whether or not an attribute is modifiable.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false,
              "canonicalValues": [
                "readOnly",
                "readWrite",
                "immutable",
                "writeOnly"
              ]
            },
            {
              "name": "returned",
              "type": "string",
              "description": "Indicates when an attribute is returned in a response (e.g., to a query).",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false,
              "canonicalValues": [
                "always",
                "never",
                "default",
                "request"
              ]
            },
            {
              "name": "uniqueness",
              "type": "string",
              "description": "Indicates how unique a value must be.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false,
              "canonicalValues": [
                "none",
                "server",
                "global"
              ]
            },
            {
              "name": "referenceTypes",
              "type": "string",
              "description": "Used only with an attribute of type 'reference'.  Specifies a SCIM resourceType that a reference attribute MAY refer to, e.g., 'User'.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": true,
              "required": false,
              "caseExact": false
            },
            {
              "name": "multipleOf",
              "type": "decimal",
              "description": "The value of \"multipleOf\" MUST be a number, strictly greater than 0. A numeric instance is valid only if division by this keyword's value results in an integer.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false
            },
            {
              "name": "minimum",
              "type": "decimal",
              "description": "The value of \"minimum\" MUST be a number, representing an inclusive lower limit for a numeric instance. If the instance is a number, then this keyword validates only if the instance is greater than or exactly equal to \"minimum\".",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false
            },
            {
              "name": "maximum",
              "type": "decimal",
              "description": "The value of \"maximum\" MUST be a number, representing an inclusive upper limit for a numeric instance. If the instance is a number, then this keyword validates only if the instance is less than or exactly equal to \"maximum\".",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false
            },
            {
              "name": "maxLength",
              "type": "integer",
              "description": "The value of this keyword MUST be a non-negative integer. A string instance is valid against this keyword if its length is less than, or equal to, the value of this keyword. The length of a string instance is defined as the number of its characters as defined by RFC 8259 [RFC8259].",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false
            },
            {
              "name": "minLength",
              "type": "integer",
              "description": "The value of this keyword MUST be a non-negative integer. A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword. The length of a string instance is defined as the number of its characters as defined by RFC 8259 [RFC8259]. Omitting this keyword has the same behavior as a value of 0.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false
            },
            {
              "name": "pattern",
              "type": "string",
              "description": "The value of this keyword MUST be a string. This string SHOULD be a valid regular expression, according to the Java regular expression dialect. A string instance is considered valid if the regular expression matches the instance successfully.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false
            },
            {
              "name": "minItems",
              "type": "integer",
              "description": "The value of this keyword MUST be a non-negative integer. An array instance is valid against \"minItems\" if its size is greater than, or equal to, the value of this keyword. Omitting this keyword has the same behavior as a value of 0.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false
            },
            {
              "name": "maxItems",
              "type": "integer",
              "description": "The value of this keyword MUST be a non-negative integer. An array instance is valid against \"maxItems\" if its size is less than, or equal to, the value of this keyword.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false
            },
            {
              "name": "notBefore",
              "type": "dateTime",
              "description": "The value of this keyword MUST be a dateTime. It will verify that a given dateTime will not a have a value that is before this dateTime.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false
            },
            {
              "name": "notAfter",
              "type": "dateTime",
              "description": "The value of this keyword MUST be a dateTime. It will verify that a given dateTime will not a have a value that is after this dateTime.",
              "mutability": "readOnly",
              "returned": "default",
              "uniqueness": "none",
              "multiValued": false,
              "required": false,
              "caseExact": false
            }
          ]
        }
      ]
    }
  ],
  "meta": {
    "resourceType": "Schema",
    "created": "2019-10-18T14:51:11+02:00",
    "lastModified": "2019-10-18T14:51:11+02:00",
    "location": "/Schemas/Schema"
  }
}
